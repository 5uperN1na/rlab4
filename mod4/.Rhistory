install.packages("tidyverse")
install.packages("dplyr")
install.packages("car")
install.packages("caret")
install.packages("tidyverse")
install.packages("swirl")
library(swirl)
swirl()
# Access the data
data(gapminder)
# ---- Preparing the workspace ----
library(gapminder) # Accessing the data
library(ggplot2) # Data visualization
library(dplyr) # Data manipulation
# Access the data
data(gapminder)
# or
gapminder <- gapminder::gapminder
# The ggplot() function initializes a gpplot object
ggplot()
# Specify the data set
ggplot(gapminder)
install.packages("gapminder")
install.packages("gapminder")
# ---- Preparing the workspace ----
library(gapminder) # Accessing the data
library(ggplot2) # Data visualization
library(dplyr) # Data manipulation
# Access the data
data(gapminder)
# or
gapminder <- gapminder::gapminder
# The ggplot() function initializes a gpplot object
ggplot()
# Specify the data set
ggplot(gapminder)
head (gapminder)
# Specify the data set
ggplot(gapminder)
# The ggplot() function initializes a gpplot object
ggplot()
# Specify the data set
ggplot(gapminder)
# Specify the coordinate system
ggplot(gapminder, aes(x = year, y = pop))
# Define the geom as a new layer
# To create a scatterplot, use the function geom_point()
ggplot(gapminder, aes(x = year, y = pop)) +
geom_point()
# Define the geom as a new layer
# To create a scatterplot, use the function geom_point()
ggplot(gapminder, aes(x = year, y = pop)) +
geom_point()
# Specify the coordinate system
ggplot(gapminder, aes(x = year, y = pop))
# Define the geom as a new layer
# To create a scatterplot, use the function geom_point()
ggplot(gapminder, aes(x = year, y = pop)) +
geom_point()
# Define the geom as a new layer
# To create a scatterplot, use the function geom_point()
ggplot(gapminder, aes(x = year, y = pop)) +
geom_point()
# Alternatively, specify to each geom function being used
ggplot(gapminder) +
geom_point(aes(x = year, y = pop))
# ---- Adding dimensions: color ----
# Point color based on continent
ggplot(gapminder) +
geom_point(aes(x = year, y = pop, col = continent))
class(gapminder$pop)
class(gapminder$pop)
# To check the structure of each column quickly
str(gapminder)
# ---- Preparing the workspace ----
library(gapminder) # Accessing the data
library(ggplot2) # Data visualization
library(dplyr) # Data manipulation
# Access the data
data(gapminder)
# The ggplot() function initializes a gpplot object
ggplot()
# ---- Boxplots ----
# A categorical (factor) column on the x axis
ggplot(gapminder) +
geom_boxplot(aes(x = continent, y = lifeExp), fill = "pink")
# The ggplot() function initializes a gpplot object
ggplot()
# Specify the data set
ggplot(gapminder)
# The ggplot() function initializes a gpplot object
ggplot()
# The ggplot() function initializes a gpplot object
ggplot()
# Specify the data set
ggplot(gapminder)
head (gapminder)
# Specify the coordinate system
ggplot(gapminder, aes(x = year, y = pop))
# Access the data
data(gapminder)
# ---- Preparing the workspace ----
library(gapminder) # Accessing the data
library(ggplot2) # Data visualization
library(dplyr) # Data manipulation
# Access the data
data(gapminder)
# The ggplot() function initializes a gpplot object
ggplot()
# Specify the data set
ggplot(gapminder)
head (gapminder)
# Specify the coordinate system
ggplot(gapminder, aes(x = year, y = pop))
# Define the geom as a new layer
# To create a scatterplot, use the function geom_point()
ggplot(gapminder, aes(x = year, y = pop)) +
geom_point()
# ---- Facetting Plots ----
# Each continent gets its own panel
figure1 +
facet_wrap(~continent)
figure1 +
xlab("Year") +
ylab("Population")
figure1 <- ggplot(gapminder) +
geom_line(aes(x = year, y = pop, col = continent, group = country))
figure1
figure1 +
xlab("Year") +
ylab("Population")
figure1 +
theme_bw()
figure1 <- figure1 +
theme_bw() +
scale_color_manual(values = c("black", "green", "red", "darkorchid4", "#228B22"))
figure1
figure1 +
facet_wrap(~continent)
figure1 <- figure1 +
facet_wrap(~continent, scales = "free_y")
figure1
figure1 <- figure1 +
facet_wrap(~continent, scales = "free_y")
figure1
gapminder %>%
group_by(continent) %>%
summarise(average_gdp = mean(gdpPercap))
gapminder %>%
group_by(continent) %>%
summarise(mean(gdpPercap))
gapminder %>%
group_by(continent) %>%
summarise(average_gdp = mean(gdpPercap))
df1 <- gapminder %>%
filter(year > 1990) %>%
group_by(continent, year) %>%
summarise(minimum_pop = min(pop),
maximum_pop = max(pop),
mean_pop = mean(pop))
df1
income <- bind_rows(US_data, nonUS_data)
nrow(US_data) # 29170 rows of US data
nrow(nonUS_data) # 2706 rows of non US data
nrow(US_data) # 29170 rows of US data
nrow(nonUS_data) # 2706 rows of non US data
# ---- Module 4 ----
getwd()
setwd( "C:/Users/suarep/Documents/pds/dataScience/mod4")
# ---- Preparing the workspace ----
library(dplyr)
library (tidyr)
# Import data as a .csv from your current working directory (folder)
US_data <- read.csv("US_data.csv")
# Explore the data
head(US_data, 2)
str(US_data)
# glimpse() : alternative to str()
glimpse(US_data)
# You have similar data from other countries but in a different format
# Each individual has a identification number and there are three data frames that contain
# the information for each individual
# ---- nonUS_profession ----
# Contains the identification number and information about their profession
# Import data as a .txt
nonUS_profession <- read.delim("nonUS_profession.txt")
# Explore the data
head(nonUS_profession, 2)
glimpse(nonUS_profession)
# ---- nonUS_demographic ----
# Contains the identification number and demographic data
nonUS_demographics <- read.delim("nonUS_demographics.txt")
# Explore the data
head(nonUS_demographics, 2)
glimpse(nonUS_demographics)
# ---- nonUS_income ----
# Contains the identification number, country, and income in wide format
nonUS_income <- read.delim("nonUS_income.txt")
# Explore the data
head(nonUS_income, 2)
glimpse(nonUS_income)
# ---- Combining Data Sets ----
# You need to carefully consider the logical process that will allow you
# to use all of the available data by combining the various pieces into
# a single tidy data frame
# ---- Step One: Combine profession and demographic data ----
# What do these data sets look like?
head(nonUS_profession, 2)
head(nonUS_demographics, 2)
head(US_data, 2)
# You can't just stick these data frames together by row because each data
# set has a different order of individuals
# left_join(x, y) : joins data frames by returning all rows from x and all columns
# from x and y based on shared variables
nonUS_data <- left_join(nonUS_profession, nonUS_demographics)
head(nonUS_data, 2)
# ---- Step Two: Transform nonUS_income from wide to long ----
# What does this data set look like?
head(nonUS_income, 1)
dim(nonUS_income)
# This data is in "wide" format, where each country has its own column, and each
# individual has their own row. The cells contain information about income
# You need to convert it to "long" format; you want a column called id, a
# column called country, and a column called income
# gather() : collapses multiple columns into key-value pairs
nonUS_income_long <- gather(nonUS_income, key = country, value = income, -id)
# What does the transformed data set look like?
head(nonUS_income_long)
dim(nonUS_income_long)
# ---- Step Three: Remove the rows with income equal to NA ----
# Right now the data has every combination of id and country
# You want to discard these "extra" rows that have been added
# They can be identified by income having a value of NA
# drop_na() :  drop rows containing missing values
nonUS_income_long <- drop_na(nonUS_income_long)
# What does the transformed data set look like?
head(nonUS_income_long)
dim(nonUS_income_long)
# ---- Step Four: Combine nonUS_income_long data with nonUS_data ----
head(nonUS_data, 2)
head(nonUS_income_long)
nonUS_data <- left_join(nonUS_data, nonUS_income_long)
head(nonUS_data, 2)
# ----Step Five: Create country column in US_data ----
# Right now, the US_data doesn't have a column called country
head(US_data, 2)
# You want to create a new column called country and fill it
# in with "United States""
# mutate() : add new variables or modify existing ones
US_data <- US_data %>%
mutate(country = "United States")
# ---- Step Six: Combine nonUS_data with US_data ----
# Now US_data and nonUS_data are ready to be combined
nrow(US_data) # 29170 rows of US data
nrow(nonUS_data) # 2706 rows of non US data
income <- bind_rows(US_data, nonUS_data)
warnings()
